{"version":3,"file":"index.js","sources":["../src/createAtom.ts","../src/useAtom.ts","../src/createGlobalState.ts","../src/createStore.ts","../src/devtools.ts"],"sourcesContent":["/* eslint @typescript-eslint/ban-ts-ignore: off */\n/* eslint @typescript-eslint/no-non-null-assertion: off */\n\nimport {\n  Reducer,\n  SetStateAction,\n  // @ts-ignore\n  createMutableSource,\n} from 'react';\n\n// utility functions\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => {\n  if (isFunction(newValue)) {\n    return newValue(oldValue);\n  }\n  return newValue;\n};\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\n// createAtom\n\ntype Unsubscribe = () => void;\n\nexport type Atom<State, Action> = {\n  getState: () => State;\n  setState: (update: SetStateAction<State>) => void;\n  getStateByKey: <StateKey extends keyof State>(\n    key: StateKey,\n  ) => State[StateKey];\n  setStateByKey: <StateKey extends keyof State>(\n    key: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => void;\n  dispatch: (action: Action) => Action;\n  subscribe: (stateKey: null | keyof State, callback: () => void) => Unsubscribe;\n  mutableSource: ReturnType<typeof createMutableSource>;\n};\n\nexport function createAtom<State>(\n  initialState: State,\n): Atom<State, unknown>;\n\nexport function createAtom<State, Action>(\n  initialState: State,\n  reducer: Reducer<State, Action>,\n): Atom<State, Action>;\n\n/**\n * create an atom\n *\n * It returns a set of functions to be called outside React\n * - `getStateByKey`: a function to get the part of state by key outside React\n * - `setStateByKey`: a function to set the part of state by key outside React\n * - `getState`: a function to get the entire state\n * - `setState`: a function to get the entire state\n * - `dispatch`: an optional function that can be used if reducer is provided\n *\n * @example\n * import { createAtom } from 'react-hooks-global-state';\n *\n * const atom = createAtom({ count: 0 });\n *\n * atom.setStateByKey('count', 1);\n */\nexport function createAtom<State, Action>(\n  initialState: State,\n  reducer?: Reducer<State, Action>,\n) {\n  type StateKeys = keyof State;\n  type NullableStateKeys = null | StateKeys;\n  const keys = Object.keys(initialState);\n\n  const createListenersMap = () => {\n    const listenersMap = new Map<NullableStateKeys, Set<() => void>>();\n    keys.forEach((key) => { listenersMap.set(key as StateKeys, new Set()); });\n    listenersMap.set(null, new Set());\n    return listenersMap;\n  };\n\n  let state = initialState;\n  const listenersMap = createListenersMap();\n\n  const setStateByKey = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const updater = (prevState: State): State => ({\n      ...prevState,\n      [stateKey]: updateValue(prevState[stateKey], update),\n    });\n    state = updater(state);\n    listenersMap.get(stateKey)!.forEach((listener) => {\n      listener();\n    });\n    listenersMap.get(null)!.forEach((listener) => {\n      listener();\n    });\n  };\n\n  const notifyListeners = (prevState: State, nextState: State) => {\n    keys.forEach((key) => {\n      const nextPartialState = nextState[key as StateKeys];\n      if (prevState[key as StateKeys] !== nextPartialState) {\n        listenersMap.get(key as StateKeys)!.forEach((listener) => {\n          listener();\n        });\n      }\n    });\n    listenersMap.get(null)!.forEach((listener) => {\n      listener();\n    });\n  };\n\n  const subscribe = (stateKey: NullableStateKeys, callback: () => void) => {\n    const listeners = listenersMap.get(stateKey)!;\n    listeners.add(callback);\n    const unsubscribe = () => {\n      listeners.delete(callback);\n    };\n    return unsubscribe;\n  };\n\n  const getStateByKey = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return state[stateKey];\n  };\n\n  const getState = () => state;\n\n  const setState = (update: SetStateAction<State>) => {\n    const prevState = state;\n    state = updateValue(prevState, update);\n    notifyListeners(prevState, state);\n  };\n\n  const dispatch = (action: Action) => {\n    if (!reducer) throw new Error('no reducer specified');\n    const prevState = state;\n    state = reducer(prevState, action);\n    notifyListeners(prevState, state);\n    return action;\n  };\n\n  const atom = {\n    getState,\n    setState,\n    getStateByKey,\n    setStateByKey,\n    dispatch,\n    subscribe,\n    mutableSource: undefined,\n  };\n  atom.mutableSource = createMutableSource(atom, () => state);\n\n  return atom;\n}\n","/* eslint @typescript-eslint/ban-ts-ignore: off */\n/* eslint @typescript-eslint/no-non-null-assertion: off */\n\nimport {\n  SetStateAction,\n  useCallback,\n  // @ts-ignore\n  useMutableSource,\n} from 'react';\n\nimport type { Atom } from './createAtom';\n\nexport function useAtom<State>(\n  atom: Atom<State, unknown>,\n): [State, (u: SetStateAction<State>) => void];\n\nexport function useAtom<State, StateKey extends keyof State>(\n  atom: Atom<State, unknown>,\n  stateKey: StateKey\n): [State[StateKey], (u: SetStateAction<State[StateKey]>) => void];\n\n/**\n * use atom\n *\n * a custom hook that works like React.useState\n *\n * @example\n * import { createAtom, useAtom } from 'react-hooks-global-state';\n *\n * const atom = createAtom({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useAtom(atom, 'count');\n *   ...\n * };\n */\nexport function useAtom<State>(\n  atom: Atom<State, unknown>,\n  stateKey?: keyof State,\n) {\n  const getSnapshot = useCallback((a: Atom<State, unknown>) => {\n    if (stateKey) {\n      return a.getStateByKey(stateKey);\n    }\n    return a.getState();\n  }, [stateKey]);\n  const subscribe = useCallback((a: Atom<State, unknown>, callback: () => void) => {\n    const unsubscribe = a.subscribe(stateKey || null, callback);\n    return unsubscribe;\n  }, [stateKey]);\n  const state = useMutableSource(atom.mutableSource, getSnapshot, subscribe);\n  const updater = useCallback((u: SetStateAction<State | State[keyof State]>) => {\n    if (stateKey) {\n      atom.setStateByKey(stateKey, u as SetStateAction<State[keyof State]>);\n    } else {\n      atom.setState(u as SetStateAction<State>);\n    }\n  }, [atom, stateKey]);\n  return [state, updater] as const;\n}\n","import { createAtom } from './createAtom';\nimport { useAtom } from './useAtom';\n\n/**\n * create a gloal state\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State>(initialState: State) => {\n  const atom = createAtom(initialState);\n  return {\n    useGlobalState: <StateKey extends keyof State>(stateKey: StateKey) => (\n      useAtom<State, StateKey>(atom, stateKey)\n    ),\n    getGlobalState: atom.getStateByKey,\n    setGlobalState: atom.setStateByKey,\n  };\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nimport { Reducer } from 'react';\n\nimport { Atom, createAtom } from './createAtom';\nimport { useAtom } from './useAtom';\n\ntype Enhancer<Creator> = (creator: Creator) => Creator;\n\n/**\n * create a global store\n *\n * In additon to `useGlobaState` which is the same hook as in createGlobalState,\n * a store has `getState` and `dispatch`.\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useGlobalState } = store;\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createStore = <State, Action>(\n  reducer: Reducer<State, Action>,\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: Enhancer<any>,\n) => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState) as never;\n  const atom = createAtom(initialState, reducer);\n  return {\n    useGlobalState: <StateKey extends keyof State>(stateKey: StateKey) => (\n      useAtom<State, StateKey>(atom as Atom<State, any>, stateKey)\n    ),\n    getState: atom.getState,\n    setState: atom.setState, // for library use\n    dispatch: atom.dispatch,\n  };\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nconst compose = (...fns: any[]) => fns.reduce((p, c) => (...args: any[]) => p(c(...args)));\n\nconst initAction = () => ({ type: '@@redux/INIT' });\n\nconst createEnhancers = () => {\n  let savedReducer: any;\n  let savedInitialState: any;\n  const before = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    savedReducer = reducer;\n    savedInitialState = initialState;\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(reducer, initialState);\n    return {\n      ...store,\n      useGlobalState: (stateKey: any) => {\n        const [value] = store.useGlobalState(stateKey);\n        const MESG = 'Update is not allowed when using DevTools';\n        return [value, () => { throw new Error(MESG); }];\n      },\n    };\n  };\n  const after = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(savedReducer, savedInitialState);\n    let devState = {\n      ...reducer(initialState, initAction()),\n      ...savedInitialState,\n    };\n    const getState = () => devState;\n    const listeners: any = [];\n    const dispatch = (action: any) => {\n      devState = reducer(devState, action);\n      store.setState(devState.computedStates[devState.currentStateIndex].state);\n      listeners.forEach((f: any) => f());\n      return action;\n    };\n    const subscribe = (listener: any) => {\n      listeners.push(listener);\n      const unsubscribe = () => {\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n      return unsubscribe;\n    };\n    return {\n      ...store,\n      getState,\n      dispatch,\n      subscribe,\n    };\n  };\n  return { before, after };\n};\n\nexport const reduxDevToolsExt = () => {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) return (f: any) => f;\n  const { before, after } = createEnhancers();\n  return compose(\n    before,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n    after,\n  );\n};\n"],"names":["updateValue","oldValue","newValue","validateStateKey","keys","stateKey","includes","Error","createAtom","initialState","reducer","Object","state","listenersMap","Map","forEach","key","set","Set","createListenersMap","notifyListeners","prevState","nextState","get","listener","atom","getState","setState","update","getStateByKey","process","env","NODE_ENV","setStateByKey","dispatch","action","subscribe","callback","listeners","add","mutableSource","undefined","createMutableSource","useAtom","getSnapshot","useCallback","a","useMutableSource","u","useGlobalState","getGlobalState","setGlobalState","createStore","enhancer","type","window","__REDUX_DEVTOOLS_EXTENSION__","reduce","p","c","compose","savedReducer","savedInitialState","store","devState","computedStates","currentStateIndex","f","push","index","indexOf","splice"],"mappings":"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"}