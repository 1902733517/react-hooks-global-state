{"version":3,"file":"index.esm.js","sources":["../src/createContainer.ts","../src/createGlobalState.ts","../src/createStore.ts","../src/devtools.ts"],"sourcesContent":["/* eslint @typescript-eslint/ban-ts-ignore: off */\n\nimport {\n  Reducer,\n  SetStateAction,\n  // @ts-ignore\n  createMutableSource,\n  useCallback,\n  // @ts-ignore\n  useMutableSource,\n} from 'react';\n\n// utility functions\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => {\n  if (isFunction(newValue)) {\n    return newValue(oldValue);\n  }\n  return newValue;\n};\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\n\n// constants\n\nconst GLOBAL_STATE_PROPERTY = 'g';\nconst LISTENERS_PROPERTY = 'l';\n\n// createContainer\n\nexport const createContainer = <State, Action>(\n  reducer: Reducer<State, Action>,\n  initialState: State,\n) => {\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  const source = {\n    [GLOBAL_STATE_PROPERTY]: initialState,\n    [LISTENERS_PROPERTY]: Object.fromEntries(keys.map((key) => [key, new Set()])) as {\n      [StateKey in StateKeys]: Set<() => void>;\n    },\n  };\n\n  const mutableSource = createMutableSource(\n    source,\n    (s: typeof source) => s[GLOBAL_STATE_PROPERTY],\n  );\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const updater = (previousState: State): State => ({\n      ...previousState,\n      [stateKey]: updateValue(previousState[stateKey], update),\n    });\n    source[GLOBAL_STATE_PROPERTY] = updater(source[GLOBAL_STATE_PROPERTY]);\n    source[LISTENERS_PROPERTY][stateKey].forEach((listener) => {\n      listener();\n    });\n  };\n\n  const notifyListeners = (prevState: State, nextState: State) => {\n    keys.forEach((key) => {\n      const nextPartialState = nextState[key as StateKeys];\n      if (prevState[key as StateKeys] !== nextPartialState) {\n        source[LISTENERS_PROPERTY][key as StateKeys].forEach((listener) => {\n          listener();\n        });\n      }\n    });\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const getSnapshot = useCallback((s: typeof source) => (\n      s[GLOBAL_STATE_PROPERTY][stateKey]\n    ), [stateKey]);\n    const subscribe = useCallback((s: typeof source, callback: () => void) => {\n      const listeners = s[LISTENERS_PROPERTY][stateKey];\n      listeners.add(callback);\n      const unsubscribe = () => {\n        listeners.delete(callback);\n      };\n      return unsubscribe;\n    }, [stateKey]);\n    const partialState = useMutableSource(mutableSource, getSnapshot, subscribe);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return source[GLOBAL_STATE_PROPERTY][stateKey];\n  };\n\n  const getWholeState = () => source[GLOBAL_STATE_PROPERTY];\n\n  const setWholeState = (nextGlobalState: State) => {\n    const prevGlobalState = source[GLOBAL_STATE_PROPERTY];\n    source[GLOBAL_STATE_PROPERTY] = nextGlobalState;\n    notifyListeners(prevGlobalState, nextGlobalState);\n  };\n\n  const dispatchAction = (action: Action) => {\n    const prevGlobalState = source[GLOBAL_STATE_PROPERTY];\n    source[GLOBAL_STATE_PROPERTY] = reducer(prevGlobalState, action);\n    notifyListeners(prevGlobalState, source[GLOBAL_STATE_PROPERTY]);\n    return action;\n  };\n\n  return {\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    getState: getWholeState,\n    setState: setWholeState, // for devtools.js\n    dispatch: dispatchAction,\n  };\n};\n","import { createContainer } from './createContainer';\n\ntype ExportFields =\n  | 'useGlobalState'\n  | 'getGlobalState'\n  | 'setGlobalState';\n\n/**\n * create a gloal state\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State>(initialState: State) => {\n  const store = createContainer((state: State, _action: never) => state, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","import { Reducer } from 'react';\n\nimport { createContainer } from './createContainer';\n\ntype Enhancer<Creator> = (creator: Creator) => Creator;\n\ntype ExportFields =\n  | 'useGlobalState'\n  | 'getState'\n  | 'dispatch';\n\n/**\n * create a global store\n *\n * In additon to `useGlobaState` which is the same hook as in createGlobalState,\n * a store has `getState` and `dispatch`.\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useGlobalState } = store;\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createStore = <State, Action>(\n  reducer: Reducer<State, Action>,\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: Enhancer<any>,\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n) => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState) as never;\n  const store = createContainer(reducer, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nconst compose = (...fns: any[]) => fns.reduce((p, c) => (...args: any[]) => p(c(...args)));\n\nconst initAction = () => ({ type: '@@redux/INIT' });\n\nconst createEnhancers = () => {\n  let savedReducer: any;\n  let savedInitialState: any;\n  const before = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    savedReducer = reducer;\n    savedInitialState = initialState;\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(reducer, initialState);\n    return {\n      ...store,\n      useGlobalState: (stateKey: any) => {\n        const [value] = store.useGlobalState(stateKey);\n        const MESG = 'Update is not allowed when using DevTools';\n        return [value, () => { throw new Error(MESG); }];\n      },\n    };\n  };\n  const after = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(savedReducer, savedInitialState);\n    let devState = {\n      ...reducer(initialState, initAction()),\n      ...savedInitialState,\n    };\n    const getState = () => devState;\n    const listeners: any = [];\n    const dispatch = (action: any) => {\n      devState = reducer(devState, action);\n      store.setState(devState.computedStates[devState.currentStateIndex].state);\n      listeners.forEach((f: any) => f());\n      return action;\n    };\n    const subscribe = (listener: any) => {\n      listeners.push(listener);\n      const unsubscribe = () => {\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n      return unsubscribe;\n    };\n    return {\n      ...store,\n      getState,\n      dispatch,\n      subscribe,\n    };\n  };\n  return { before, after };\n};\n\nexport const reduxDevToolsExt = () => {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) return (f: any) => f;\n  const { before, after } = createEnhancers();\n  return compose(\n    before,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n    after,\n  );\n};\n"],"names":["validateStateKey","keys","stateKey","includes","Error","createContainer","reducer","initialState","Object","source","fromEntries","map","key","Set","mutableSource","createMutableSource","s","setGlobalState","update","previousState","newValue","process","env","NODE_ENV","forEach","listener","notifyListeners","prevState","nextState","useGlobalState","getSnapshot","useCallback","subscribe","callback","listeners","add","useMutableSource","u","getGlobalState","getState","setState","nextGlobalState","prevGlobalState","dispatch","action","createGlobalState","state","_action","createStore","enhancer","undefined","type","reduxDevToolsExt","window","__REDUX_DEVTOOLS_EXTENSION__","fns","reduce","p","c","compose","savedReducer","savedInitialState","store","devState","computedStates","currentStateIndex","f","push","index","indexOf","splice"],"mappings":"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"}